/* FUNZIONE PER L'ACQUISTO DA PARTE DI UN CLIENTE FISICO
    VIENE SCALATA LA QUANTITA DI PRODOTTO ACQUISTATA DALLE SCORTE DI LIRONICS */

CREATE FUNCTION ACQUISTO_PRESENZA (COD_PROD CHAR, QUANT INTEGER)
RETURNS INTEGER 
AS $$ 

DECLARE 
    QAVIABLE INTEGER;
    QUPDATE INTEGER;

BEGIN 
    SELECT QUANTITA_RESIDUA INTO QAVIABLE
    FROM PRODOTTO
    WHERE CODICE_PRODOTTO = COD_PROD;

    QUPDATE := QAVIABLE - QUANT;

    UPDATE PRODOTTO
    SET QUANTITA_RESIDUA = QUPDATE
    WHERE CODICE_PRODOTTO = COD_PROD;

    RETURN QUPDATE;
END;
$$ LANGUAGE 'plpgsql';


/* TRIGGER CHE NON CONSENTE DI AGGIUNGERE UN DETTAGLIO SE UN PRODOTTO NON E' PRESENTE O 
    SE LA QUANTITA' RICHIESTA SUPERA LA QUANTITA' DISPONIBILE */ 
CREATE FUNCTION UPDATE_ORDINE () 
RETURNS trigger 
AS $$
 
    DECLARE QDISP INTEGER;  /* quantità disponibile */
    DECLARE QRES INTEGER;   /* quantità residua dopo l'aggiornamento */
BEGIN 
    SELECT QUANTITA_RESIDUA INTO QDISP 
    FROM PRODOTTO 
    WHERE PRODOTTO.CODICE_PRODOTTO = NEW.CODICE_PRODOTTO;
    
    IF QDISP = 0
        THEN RAISE EXCEPTION 'Articolo momentaneamente non disponibile';
    END IF;

    QRES := QDISP - NEW.QUANTITA;

    IF QRES < 0 
        THEN RAISE EXCEPTION 'Quantità disponibile insufficiente per l oridine' ;
    ELSE
        UPDATE PRODOTTO
        SET QUANTITA_RESIDUA = QRES
        WHERE PRODOTTO.CODICE_PRODOTTO = NEW.CODICE_PRODOTTO;
    END IF; 
    RETURN NEW;
END  
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER UPDATE_ORDINE BEFORE 
INSERT ON DETTAGLIO FOR EACH ROW
EXECUTE PROCEDURE UPDATE_ORDINE(); 

/* TRIGGER CHE CONTROLLA CHE L'IMPORTO NEL DETTAGLIO SIA UGUALE ALLA 
    QUANTITA PER IL PREZZO */
CREATE FUNCTION CONTROLLA_IMPORTO () 
RETURNS TRIGGER 
AS $$
    DECLARE PR REAL;
    DECLARE TOT REAL;
BEGIN
    
    PR := (SELECT PREZZO
    FROM PRODOTTO 
    WHERE CODICE_PRODOTTO = NEW.CODICE_PRODOTTO);

    TOT := NEW.QUANTITA * PR;
    IF NEW.IMPORTO < TOT
        THEN RAISE EXCEPTION 'IMPORTO INFERIORE AL DOVUTO';
    END IF;
    IF NEW.IMPORTO > TOT 
        THEN RAISE EXCEPTION 'IMPORTO SUPERIORE AL DOVUTO';
    END IF; 
    RETURN NEW;
END
$$ LANGUAGE 'plpgsql';
CREATE TRIGGER CONTROLLA_IMPORTO BEFORE
INSERT ON DETTAGLIO FOR EACH ROW
EXECUTE PROCEDURE CONTROLLA_IMPORTO();


/* TRIGGER CHE AGGIORNA LA QUANTITA DISPONIBILE DI UN PRODOTTO QUANDO VIENE FATTA UNA FORNITURA 
    SE E SOLO SE IL PRODOTTO ESISTE NELLA TABELLA DEI PRODOTTI E SE LA QUANTITA FORNITA MAGGIORE DI 0 */
CREATE FUNCTION NUOVA_FORNITURA()
RETURNS TRIGGER 
AS $$
BEGIN

    IF NEW.QUANTITA < 0 
       THEN RAISE EXCEPTION 'Quantità fornita minore di 0';
    END IF;
    IF NEW.QUANTITA = 0 
       THEN RAISE EXCEPTION 'Quantità fonrita nulla ';
    END IF; 

    UPDATE PRODOTTO
    SET QUANTITA_RESIDUA = QUANTITA_RESIDUA + NEW.QUANTITA
    WHERE CODICE_PRODOTTO = NEW.CODICE_PRODOTTO;

    RETURN NEW;
END
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER NUOVA_FORNITURA BEFORE 
INSERT ON DI FOR EACH ROW
EXECUTE PROCEDURE NUOVA_FORNITURA();  

/* TRIGGER CHE CONTROLLA CHE IL PREZZO DI UNA PROMOZIONE SIA MINORE DEL PREZZO 
    CHE SOLITAMENTE HA L'ARTICOLO */
CREATE FUNCTION CONTROLLA_OFFERTA() 
RETURNS TRIGGER 
AS $$

	DECLARE PR REAL;
BEGIN
    IF NEW.PREZZO_SCONTATO < 0 
        THEN RAISE EXCEPTION 'il prezzo dell offerta è minore di 0';
    END IF;
    IF NEW.PREZZO_SCONTATO = 0 
        THEN RAISE EXCEPTION 'il prezzo dellofferta non può essere 0 ';
    END IF;

    PR:=( SELECT PREZZO 
    FROM PRODOTTO 
    WHERE PRODOTTO.CODICE_PRODOTTO = NEW.CODICE_PRODOTTO);
    
    IF (NEW.PREZZO_SCONTATO > PR)
        THEN RAISE EXCEPTION 'il  prezzo scontato non può essere maggiore del prezzo del prodotto';
    END IF;
    RETURN NEW; 
END
$$ LANGUAGE 'plpgsql';
CREATE TRIGGER CONTROLLA_OFFERTA BEFORE
INSERT ON PROMOZIONE FOR EACH ROW
EXECUTE PROCEDURE CONTROLLA_OFFERTA();




/* TRIGGER CHE NON CONSENTE DI INSERIRE UNA RECENSIONE DI UN PRODOTTO SE NON E' STATO ORDINATO */
CREATE FUNCTION OK_RECENSIONE()
RETURNS TRIGGER
AS $$

DECLARE US VARCHAR(100);
DECLARE CO CHAR(10);

BEGIN
    US := NEW.USERNAME;
    CO := NEW.CODICE_PRODOTTO;

    IF NOT EXISTS 
        ((SELECT *
        FROM DETTAGLIO 
        WHERE USERNAME = US AND CODICE_PRODOTTO = CO))
    
        THEN RAISE EXCEPTION 'IL CLIENTE NON HA ORDINATO QUESTO PRODOTTO, IMPOSSIBILE INSERIRE RECENSIONE';
    END IF;

    RETURN NEW;
END
$$ LANGUAGE 'plpgsql';
CREATE TRIGGER OK_RECENSIONE BEFORE
INSERT ON RECENSIONE FOR EACH ROW
EXECUTE PROCEDURE OK_RECENSIONE();